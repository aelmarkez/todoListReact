{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\moz-todo-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n_c = FILTER_NAMES;\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n    console.log(tasks[0]);\n  }\n\n  function deletingTask(id) {\n    const deleteTask = tasks.filter(task => id !== task.id);\n    setTasks(deleteTask);\n  }\n\n  function editTask(id, newName) {\n    const editTasks = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editTasks);\n  }\n\n  const [filter, setFilter] = useState('All');\n  const taskList = tasks.filter(FILTER_MAP[filter])(task => /*#__PURE__*/_jsxDEV(Todo, {\n    name: task.name,\n    id: task.id,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deletingTask: deletingTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 61\n  }, this));\n  const taskNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${taskNoun} remaining`;\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters btn-group stack-exception\",\n      children: filterList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"1Yf5F5gak8KNTISO1Dg/Cz+ycPs=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FILTER_NAMES\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/react/moz-todo-react/src/App.js"],"names":["React","useState","Todo","Form","FilterButton","nanoid","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","App","props","tasks","setTasks","addTask","name","newTask","id","toggleTaskCompleted","updatedTasks","map","console","log","deletingTask","deleteTask","filter","editTask","newName","editTasks","setFilter","taskList","taskNoun","length","headingText","filterList"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport {nanoid} from 'nanoid';\n\n\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\n\nfunction App(props) {\n \n  const [tasks,setTasks] = useState(props.tasks)\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\"+nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n  function toggleTaskCompleted(id){\n    const updatedTasks = tasks.map(task=> {\n      if (id === task.id){\n        return {...task, completed : !task.completed} ;\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n    console.log(tasks[0]);\n  }\n  function deletingTask(id){\n    const deleteTask = tasks.filter(task => id !== task.id);\n    setTasks(deleteTask);\n\n  }\n  function editTask(id,newName){\n    const editTasks = tasks.map(task =>{\n        if (id === task.id){\n\n          return {...task,name: newName};\n        }\n        return task;\n      }\n    );\n    setTasks(editTasks);\n  }\n  const [filter, setFilter] = useState('All');\n\n\n  const taskList = tasks.filter(FILTER_MAP[filter])(task => <Todo name={task.name} \n                    id={task.id} completed={task.completed} \n                    key={task.id} toggleTaskCompleted={toggleTaskCompleted} \n                    deletingTask={deletingTask} editTask={editTask}/>);\n  \n  \n  const taskNoun = taskList.length !== 1 ? 'tasks':'task';\n  const headingText = `${taskList.length} ${taskNoun} remaining`;\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n    \nreturn(\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask}/>\n      \n      <div className=\"filters btn-group stack-exception\">\n       {filterList}\n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n       {taskList}\n\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}